var documenterSearchIndex = {"docs":
[{"location":"api_reference/#Data-Models","page":"Models","title":"Data Models","text":"","category":"section"},{"location":"api_reference/","page":"Models","title":"Models","text":"This section documents the key data models used throughout the SemaDbAPI.jl package.","category":"page"},{"location":"api_reference/#SemaDbAPI.BinaryQuantizerParameters","page":"Models","title":"SemaDbAPI.BinaryQuantizerParameters","text":"BinaryQuantizerParameters Converts vectors to boolean values. Works effectively only if vector features are already binary or are normally distributed.\n\nBinaryQuantizerParameters(;\n    threshold=nothing,\n    triggerThreshold=10000,\n    distanceMetric=nothing,\n)\n\n- threshold::Float64 : Optional initial threshold for binary quantization, if not provided, it will be calculated at trigger threshold.\n- triggerThreshold::Float64 : Optional trigger threshold for binary quantization.\n- distanceMetric::String : The distance metric to use for binary quantization after the vectors are encoded\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.CreateCollectionRequest","page":"Models","title":"SemaDbAPI.CreateCollectionRequest","text":"CreateCollectionRequest\n\nCreateCollectionRequest(;\n    id=nothing,\n    indexSchema=nothing,\n)\n\n- id::String : The unique identifier of the collection\n- indexSchema::Dict{String, IndexSchemaValue} : The schema for the collection, each property can be indexed with a different type of index.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.DeletePointsRequest","page":"Models","title":"SemaDbAPI.DeletePointsRequest","text":"DeletePointsRequest\n\nDeletePointsRequest(;\n    ids=nothing,\n)\n\n- ids::Vector{String}\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.FailedPointsInner","page":"Models","title":"SemaDbAPI.FailedPointsInner","text":"FailedPoints_inner\n\nFailedPointsInner(;\n    id=nothing,\n    error=nothing,\n)\n\n- id::String\n- error::String\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.GetCollectionResponse","page":"Models","title":"SemaDbAPI.GetCollectionResponse","text":"GetCollectionResponse\n\nGetCollectionResponse(;\n    id=nothing,\n    indexSchema=nothing,\n    shards=nothing,\n)\n\n- id::String : The unique identifier of the collection\n- indexSchema::Dict{String, IndexSchemaValue} : The schema for the collection, each property can be indexed with a different type of index.\n- shards::Vector{GetCollectionResponseShardsInner}\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.GetCollectionResponseShardsInner","page":"Models","title":"SemaDbAPI.GetCollectionResponseShardsInner","text":"GetCollectionResponseshardsinner\n\nGetCollectionResponseShardsInner(;\n    id=nothing,\n    pointCount=nothing,\n)\n\n- id::String\n- pointCount::Float64\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.IndexSchemaValue","page":"Models","title":"SemaDbAPI.IndexSchemaValue","text":"IndexSchemaValue Defines what the property is and how it is indexed.\n\nIndexSchemaValue(;\n    type=nothing,\n    vectorFlat=nothing,\n    vectorVamana=nothing,\n    text=nothing,\n    string=nothing,\n    stringArray=nothing,\n)\n\n- type::String\n- vectorFlat::IndexVectorFlatParameters\n- vectorVamana::IndexVectorVamanaParameters\n- text::IndexTextParameters\n- string::IndexStringParameters\n- stringArray::IndexStringParameters\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.IndexStringParameters","page":"Models","title":"SemaDbAPI.IndexStringParameters","text":"IndexStringParameters Parameters for string indexing\n\nIndexStringParameters(;\n    caseSensitive=false,\n)\n\n- caseSensitive::Bool : Whether the string is case sensitive\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.IndexTextParameters","page":"Models","title":"SemaDbAPI.IndexTextParameters","text":"IndexTextParameters Parameters for text indexing\n\nIndexTextParameters(;\n    analyser=\"standard\",\n)\n\n- analyser::String\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.IndexVectorFlatParameters","page":"Models","title":"SemaDbAPI.IndexVectorFlatParameters","text":"IndexVectorFlatParameters Parameters for flat indexing. Flat indexing is the simplest form of indexing, where the search is exhaustive.\n\nIndexVectorFlatParameters(;\n    vectorSize=nothing,\n    distanceMetric=nothing,\n    quantizer=nothing,\n)\n\n- vectorSize::Float64 : The size of the vectors in the collection\n- distanceMetric::DistanceMetric\n- quantizer::Quantizer\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.IndexVectorVamanaParameters","page":"Models","title":"SemaDbAPI.IndexVectorVamanaParameters","text":"IndexVectorVamanaParameters Parameters for Vamana indexing\n\nIndexVectorVamanaParameters(;\n    vectorSize=nothing,\n    distanceMetric=nothing,\n    searchSize=75,\n    degreeBound=64,\n    alpha=1.2,\n    quantizer=nothing,\n)\n\n- vectorSize::Float64 : The size of the vectors in the collection\n- distanceMetric::DistanceMetric\n- searchSize::Float64 : Determines the scope of the greedy search algorithm. The higher the value, the more exhaustive the search.\n- degreeBound::Float64 : Maximum number of edges of a node in the graph. The higher the value, the denser the graph becomes, slower the search but more accurate.\n- alpha::Float64 : Determines how aggressive the edge pruning is. Higher values reduce pruning, lower values make it more aggressive.\n- quantizer::Quantizer\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.InlineObject","page":"Models","title":"SemaDbAPI.InlineObject","text":"inline_object\n\nInlineObject(;\n    message=nothing,\n)\n\n- message::String : A message indicating the result of the operation\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.InlineObject1","page":"Models","title":"SemaDbAPI.InlineObject1","text":"inlineobject1\n\nInlineObject1(;\n    error=nothing,\n)\n\n- error::String : An error message hopefully describing the problem\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.InsertPointsRequest","page":"Models","title":"SemaDbAPI.InsertPointsRequest","text":"InsertPointsRequest\n\nInsertPointsRequest(;\n    points=nothing,\n)\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.InsertPointsResponse","page":"Models","title":"SemaDbAPI.InsertPointsResponse","text":"InsertPointsResponse\n\nInsertPointsResponse(;\n    message=nothing,\n    failedRanges=nothing,\n)\n\n- message::String : A message indicating the result of the operation\n- failedRanges::Vector{InsertPointsResponseFailedRangesInner} : A list of ranges of points that failed to insert. Each range has a start and an end index.  The end index is exclusive. For example, if the range is [0, 2], the first two points failed to insert.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.InsertPointsResponseFailedRangesInner","page":"Models","title":"SemaDbAPI.InsertPointsResponseFailedRangesInner","text":"InsertPointsResponsefailedRangesinner\n\nInsertPointsResponseFailedRangesInner(;\n    shardId=nothing,\n    start=nothing,\n    var\"end\"=nothing,\n    error=nothing,\n)\n\n- shardId::String\n- start::Int64\n- var\"end\"::Int64\n- error::String\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.ListCollectionResponse","page":"Models","title":"SemaDbAPI.ListCollectionResponse","text":"ListCollectionResponse\n\nListCollectionResponse(;\n    collections=nothing,\n)\n\n- collections::Vector{ListCollectionResponseCollectionsInner}\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.ListCollectionResponseCollectionsInner","page":"Models","title":"SemaDbAPI.ListCollectionResponseCollectionsInner","text":"ListCollectionResponsecollectionsinner\n\nListCollectionResponseCollectionsInner(;\n    id=nothing,\n)\n\n- id::String : The unique identifier of the collection\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.PointAsObject","page":"Models","title":"SemaDbAPI.PointAsObject","text":"PointAsObject JSON serialisable point data\n\nPointAsObject(;\n    _id=nothing,\n)\n\n- _id::String\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.ProductQuantizerParameters","page":"Models","title":"SemaDbAPI.ProductQuantizerParameters","text":"ProductQuantizerParameters Uses the product quantization to reduce the memory footprint of the vectors. It may be slower and less accurate.\n\nProductQuantizerParameters(;\n    numCentroids=256,\n    numSubVectors=nothing,\n    triggerThreshold=10000,\n)\n\n- numCentroids::Float64 : Number of centroids to quantize to, this is the k* parameter in the paper and is often set to 255 giving 256 centroids (including 0). We are limiting this to maximum of 256 (uint8) to keep the overhead of this process tractable.\n- numSubVectors::Float64 : Number of subvectors / segments / subquantizers to use, this is the m parameter in the paper and is often set to 8.\n- triggerThreshold::Float64 : The trigger threshold is the number of points in the collection that will trigger the quantization process. This is to ensure that the quantization process is only triggered when the collection is large enough to benefit from the memory savings.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.Quantizer","page":"Models","title":"SemaDbAPI.Quantizer","text":"Quantizer Applied quantizer to the vectors if any\n\nQuantizer(;\n    type=nothing,\n    binary=nothing,\n    product=nothing,\n)\n\n- type::String\n- binary::BinaryQuantizerParameters\n- product::ProductQuantizerParameters\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.Query","page":"Models","title":"SemaDbAPI.Query","text":"Query A query object that can be used to perform search. The query object can contain multiple filters, each with a property and a value. Use _and and _or to combine queries.\n\nQuery(;\n    property=nothing,\n    vectorFlat=nothing,\n    vectorVamana=nothing,\n    text=nothing,\n    string=nothing,\n    integer=nothing,\n    float=nothing,\n    stringArray=nothing,\n    _and=nothing,\n    _or=nothing,\n)\n\n- property::String\n- vectorFlat::SearchVectorFlatOptions\n- vectorVamana::SearchVectorVamanaOptions\n- text::SearchTextOptions\n- string::SearchStringOptions\n- integer::SearchNumberOptions\n- float::SearchNumberOptions\n- stringArray::SearchStringArrayOptions\n- _and::Vector{Query}\n- _or::Vector{Query}\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.SearchNumberOptions","page":"Models","title":"SemaDbAPI.SearchNumberOptions","text":"SearchNumberOptions Options for searching numbers. The operator determines how the search is performed. The value is a number to search for, endValue is used for range queries.\n\nSearchNumberOptions(;\n    value=nothing,\n    operator=nothing,\n    endValue=nothing,\n)\n\n- value::Float64\n- operator::String\n- endValue::Float64\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.SearchPointsResponse","page":"Models","title":"SemaDbAPI.SearchPointsResponse","text":"SearchPointsResponse\n\nSearchPointsResponse(;\n    points=nothing,\n)\n\n- points::Vector{PointAsObject}\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.SearchRequest","page":"Models","title":"SemaDbAPI.SearchRequest","text":"SearchRequest\n\nSearchRequest(;\n    query=nothing,\n    select=nothing,\n    sort=nothing,\n    offset=0,\n    limit=10,\n)\n\n- query::Query\n- select::Vector{String} : A list of properties to return in the search results. If not provided, all properties are returned.\n- sort::Vector{SortOption} : A list of sort options for the search results. The search results are sorted by the first sort option, then the second, and so on.\n- offset::Int64 : The number of points to skip in the search results\n- limit::Int64 : Maximum number of points to return\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.SearchStringArrayOptions","page":"Models","title":"SemaDbAPI.SearchStringArrayOptions","text":"SearchStringArrayOptions Options for searching string arrays. The operator determines how the search is performed. The value is an array of strings to search for.\n\nSearchStringArrayOptions(;\n    value=nothing,\n    operator=nothing,\n)\n\n- value::Vector{String}\n- operator::String\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.SearchStringOptions","page":"Models","title":"SemaDbAPI.SearchStringOptions","text":"SearchStringOptions Options for searching strings. The operator determines how the search is performed. The value is a string to search for.\n\nSearchStringOptions(;\n    value=nothing,\n    operator=nothing,\n    endValue=nothing,\n)\n\n- value::String\n- operator::String\n- endValue::String\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.SearchTextOptions","page":"Models","title":"SemaDbAPI.SearchTextOptions","text":"SearchTextOptions Text search options, the value is the text to search for. The weight determines the hybrid search weighting.\n\nSearchTextOptions(;\n    value=nothing,\n    operator=nothing,\n    limit=10,\n    filter=nothing,\n    weight=1,\n)\n\n- value::String\n- operator::String\n- limit::Float64 : Maximum number of points to search\n- filter::Query\n- weight::Float64 : The weight of the text search, the higher the value, the more important the text search is.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.SearchVectorFlatOptions","page":"Models","title":"SemaDbAPI.SearchVectorFlatOptions","text":"SearchVectorFlatOptions Options for searching vectors with flat indexing.\n\nSearchVectorFlatOptions(;\n    vector=nothing,\n    operator=nothing,\n    limit=10,\n    filter=nothing,\n    weight=1,\n)\n\n- vector::Vector{Float64} : A vector with a fixed number of dimensions\n- operator::String\n- limit::Float64 : Maximum number of points to search\n- filter::Query\n- weight::Float64 : The weight of the vector search, the higher the value, the more important the vector search is.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.SearchVectorVamanaOptions","page":"Models","title":"SemaDbAPI.SearchVectorVamanaOptions","text":"SearchVectorVamanaOptions Options for searching vectors with Vamana indexing. The larger the search size the longer the search will take.\n\nSearchVectorVamanaOptions(;\n    vector=nothing,\n    operator=nothing,\n    searchSize=75,\n    limit=10,\n    filter=nothing,\n    weight=1,\n)\n\n- vector::Vector{Int64} : A vector with a fixed number of dimensions\n- operator::String\n- searchSize::Float64 : Determines the scope of the greedy search algorithm. The higher the value, the more exhaustive the search.\n- limit::Float64 : Maximum number of points to search\n- filter::Query\n- weight::Float64 : The weight of the vector search, the higher the value, the more important the vector search is.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.SortOption","page":"Models","title":"SemaDbAPI.SortOption","text":"SortOption Sort options for search results. The field is the property to sort by and the order is the direction to sort in.\n\nSortOption(;\n    property=nothing,\n    descending=false,\n)\n\n- property::String\n- descending::Bool\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.UpdatePointsRequest","page":"Models","title":"SemaDbAPI.UpdatePointsRequest","text":"UpdatePointsRequest\n\nUpdatePointsRequest(;\n    points=nothing,\n)\n\n- points::Vector{PointAsObject}\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.UpdatePointsResponse","page":"Models","title":"SemaDbAPI.UpdatePointsResponse","text":"UpdatePointsResponse\n\nUpdatePointsResponse(;\n    message=nothing,\n    failedPoints=nothing,\n)\n\n- message::String : A message indicating the result of the operation\n- failedPoints::Vector{FailedPointsInner} : A list of points that failed to insert. Each point has an id and an error message. For example, if the error is not found, the point does not exist in the collection.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#SemaDbAPI.create_collection-Tuple{SemaDBClient, String, CreateCollectionRequest}","page":"Models","title":"SemaDbAPI.create_collection","text":"Create a new collection\n\nCreates a new collection if it does not already exist. The maximum number of collections per user is restricted based on the plan. Before you can insert and search points, you must create a collection.\n\nParams:\n\ncreatecollectionrequest::CreateCollectionRequest (required)\n\nReturn: InlineObject, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#SemaDbAPI.delete_collection-Tuple{SemaDBClient, String, String}","page":"Models","title":"SemaDbAPI.delete_collection","text":"Delete a collection\n\nDeletes a collection and all of its points. This operation is irreversible. If you want to delete only some points, use the bulk delete endpoint. If some shards are temporarily unavailable, the operation will still succeed, but some of the data will be deleted in the future.\n\nParams:\n\ncollection_id::String (required)\n\nReturn: InlineObject, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#SemaDbAPI.delete_point-Tuple{SemaDBClient, String, String, DeletePointsRequest}","page":"Models","title":"SemaDbAPI.delete_point","text":"Delete points by id\n\nBulk delete points based on id. This endpoint does not check if the points exist. If you attempt to delete a point that does not exist, it will be ignored and included in the failedPoints list.\n\nParams:\n\ncollection_id::String (required)\ndeletepointsrequest::DeletePointsRequest (required)\n\nReturn: DeletePointsResponse, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#SemaDbAPI.get_collection-Tuple{SemaDBClient, String, String}","page":"Models","title":"SemaDbAPI.get_collection","text":"Get the details of a collection\n\nThis endpoint attempts to also list the shards currently available in the collection. Some shards may be temporarily unavailable. In that case, you can retry at a future time.\n\nParams:\n\ncollection_id::String (required)\n\nReturn: GetCollectionResponse, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#SemaDbAPI.insert_point-Tuple{SemaDBClient, String, String, InsertPointsRequest}","page":"Models","title":"SemaDbAPI.insert_point","text":"Insert new points into the collection\n\nThis endpoint assumes all points to be inserted are new points and does not check for duplication. It is important to ensure consistency of the database you do not insert duplicate points. If you are unsure if a point exists, you can leave the id field blank and the database will assign a new id. For cosine distance, you must normalise the vectors prior to inserting them.\n\nParams:\n\ncollection_id::String (required)\ninsertpointrequest::InsertPointsRequest (required)\n\nReturn: InsertPointsResponse, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#SemaDbAPI.list_collections-Tuple{SemaDBClient, String}","page":"Models","title":"SemaDbAPI.list_collections","text":"List user collections\n\nReturns a list of all collections for the current user. The list is not sorted by any value and the order may change between requests.\n\nParams:\n\nReturn: ListCollectionResponse, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#SemaDbAPI.search_point-Tuple{SemaDBClient, String, String, SearchRequest}","page":"Models","title":"SemaDbAPI.search_point","text":"Fast index based search\n\nThis endpoint allows searching for points in a collection using the index. The search is based on the index schema of the collection.\n\nParams:\n\ncollection_id::String (required)\nsearch_request::SearchRequest (required)\n\nReturn: SearchPointsResponse, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#SemaDbAPI.update_point-Tuple{SemaDBClient, String, String, UpdatePointsRequest}","page":"Models","title":"SemaDbAPI.update_point","text":"Update existing points with new data\n\nThis endpoint allows updating point vectors and metadata. It does not allow updating the point id. If you want to update the id, you must delete the point and insert a new point. The points are required to exist before you can update them. You can check the failedPoints to see which points failed to update and potentially why.\n\nParams:\n\ncollection_id::String (required)\nupdatepointsrequest::UpdatePointsRequest (required)\n\nReturn: UpdatePointsResponse, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"search/#Search-API","page":"Search","title":"Search API","text":"","category":"section"},{"location":"search/","page":"Search","title":"Search","text":"The search functionality in SemaDB allows you to find points based on various criteria, including vector similarity, text matching, and metadata filtering.","category":"page"},{"location":"search/#Basic-Search","page":"Search","title":"Basic Search","text":"","category":"section"},{"location":"search/#Example:-Simple-Vector-Search","page":"Search","title":"Example: Simple Vector Search","text":"","category":"section"},{"location":"search/","page":"Search","title":"Search","text":"# Search for points similar to [0.1, 0.2, 0.3]\nsearch_opts = SearchVectorVamanaOptions(\n    vector = [0.1, 0.2, 0.3],\n    operator = \"near\",\n    searchSize = 75,\n    limit = 5\n)\n\nquery = Query(property = \"vector\", vectorVamana = search_opts)\nsearch_req = SearchRequest(query = query)\nresults = search_point(client, \"user1\", \"vectors\", search_req)\n\nfor point in results.points\n    println(\"ID: $(point._id)\")\nend","category":"page"},{"location":"search/#Query-Composition","page":"Search","title":"Query Composition","text":"","category":"section"},{"location":"search/","page":"Search","title":"Search","text":"SemaDB supports complex queries that combine multiple conditions.","category":"page"},{"location":"search/#Example:-AND-Combination","page":"Search","title":"Example: AND Combination","text":"","category":"section"},{"location":"search/","page":"Search","title":"Search","text":"# Find points with vector near [0.1, 0.2, 0.3] AND metadata.category equals \"A\"\nvector_query = Query(\n    property = \"vector\",\n    vectorVamana = SearchVectorVamanaOptions(\n        vector = [0.1, 0.2, 0.3],\n        operator = \"near\"\n    )\n)\ncategory_query = Query(\n    property = \"metadata.category\",\n    string = SearchStringOptions(operator = \"equals\", value = \"A\")\n)\ncombined_query = Query(_and = [vector_query, category_query])\n\nsearch_req = SearchRequest(query = combined_query, limit = 10)\nresults = search_point(client, \"user1\", \"vectors\", search_req)","category":"page"},{"location":"search/#Example:-OR-Combination","page":"Search","title":"Example: OR Combination","text":"","category":"section"},{"location":"search/","page":"Search","title":"Search","text":"# Find points with metadata.category equals \"A\" OR \"B\"\nquery_a = Query(\n    property = \"metadata.category\",\n    string = SearchStringOptions(operator = \"equals\", value = \"A\")\n)\nquery_b = Query(\n    property = \"metadata.category\",\n    string = SearchStringOptions(operator = \"equals\", value = \"B\")\n)\ncombined_query = Query(_or = [query_a, query_b])\n\nsearch_req = SearchRequest(query = combined_query, limit = 10)\nresults = search_point(client, \"user1\", \"vectors\", search_req)","category":"page"},{"location":"search/#Example:-Sorting-by-Metadata","page":"Search","title":"Example: Sorting by Metadata","text":"","category":"section"},{"location":"search/","page":"Search","title":"Search","text":"# Search and sort by metadata.value in descending order\nsearch_opts = SearchVectorVamanaOptions(\n    vector = [0.1, 0.2, 0.3],\n    operator = \"near\"\n)\nquery = Query(property = \"vector\", vectorVamana = search_opts)\nsearch_req = SearchRequest(\n    query = query,\n    sort = [SortOption(property = \"metadata.value\", descending = true)],\n    limit = 10\n)\nresults = search_point(client, \"user1\", \"vectors\", search_req)","category":"page"},{"location":"search/#Selecting-Fields","page":"Search","title":"Selecting Fields","text":"","category":"section"},{"location":"search/","page":"Search","title":"Search","text":"# Only return specific fields\nsearch_req = SearchRequest(\n    query = query,\n    select = [\"_id\", \"metadata.category\"],\n    limit = 10\n)\nresults = search_point(client, \"user1\", \"vectors\", search_req)","category":"page"},{"location":"search/#Advanced-Search-Techniques","page":"Search","title":"Advanced Search Techniques","text":"","category":"section"},{"location":"search/#Hybrid-Search","page":"Search","title":"Hybrid Search","text":"","category":"section"},{"location":"search/","page":"Search","title":"Search","text":"Combine vector search with text search for more relevant results:","category":"page"},{"location":"search/","page":"Search","title":"Search","text":"# Vector part of the search\nvector_query = Query(\n    property = \"vector\",\n    vectorVamana = SearchVectorVamanaOptions(\n        vector = [0.1, 0.2, 0.3],\n        weight = 0.7\n    )\n)\n\n# Text part of the search\ntext_query = Query(\n    property = \"description\",\n    text = SearchTextOptions(\n        query = \"programming language\",\n        weight = 0.3\n    )\n)\n\n# Combine both queries\ncombined_query = Query(_and = [vector_query, text_query])\n\nsearch_req = SearchRequest(query = combined_query, limit = 10)\nresults = search_point(client, \"user1\", \"hybrid_collection\", search_req)","category":"page"},{"location":"search/#Range-Queries","page":"Search","title":"Range Queries","text":"","category":"section"},{"location":"search/","page":"Search","title":"Search","text":"# Find points with metadata.value between 10 and 20\nrange_query = Query(\n    property = \"metadata.value\",\n    integer = SearchNumberOptions(\n        operator = \"inRange\",\n        value = 10,\n        endValue = 20\n    )\n)\n\nsearch_req = SearchRequest(query = range_query, limit = 10)\nresults = search_point(client, \"user1\", \"vectors\", search_req)","category":"page"},{"location":"search/#Fuzzy-Text-Search","page":"Search","title":"Fuzzy Text Search","text":"","category":"section"},{"location":"search/","page":"Search","title":"Search","text":"text_query = Query(\n    property = \"description\",\n    text = SearchTextOptions(\n        query = \"programing languge\",\n        operator = \"containsAll\"\n    )\n)\n\nsearch_req = SearchRequest(query = text_query, limit = 5)\nresults = search_point(client, \"user1\", \"text_data\", search_req)","category":"page"},{"location":"search/#Performance-Considerations","page":"Search","title":"Performance Considerations","text":"","category":"section"},{"location":"search/","page":"Search","title":"Search","text":"Use appropriate searchSize for Vamana indexing (higher values increase accuracy but decrease speed)\nLimit the number of results with the limit parameter\nOnly select necessary fields with the select parameter\nFor exact search requirements, consider using Flat indexing\nFor large datasets, ensure proper indexing of frequently queried fields","category":"page"},{"location":"collections/#Collections-API","page":"Collections","title":"Collections API","text":"","category":"section"},{"location":"collections/","page":"Collections","title":"Collections","text":"Collections are the primary organizational unit in SemaDB, similar to tables in relational databases. Each collection contains points with a consistent schema.","category":"page"},{"location":"collections/#Creating-Collections","page":"Collections","title":"Creating Collections","text":"","category":"section"},{"location":"collections/#Example:-Creating-a-Collection-with-Vamana-Index","page":"Collections","title":"Example: Creating a Collection with Vamana Index","text":"","category":"section"},{"location":"collections/","page":"Collections","title":"Collections","text":"ivvp = IndexVectorVamanaParameters(\n    vectorSize = 128,\n    distanceMetric = \"cosine\",\n    searchSize = 75,\n    degreeBound = 64,\n    alpha = 1.2\n)\n\nischema = Dict(\"embedding\" => IndexSchemaValue(\n    type = \"vectorVamana\",\n    vectorVamana = ivvp\n))\n\nreq = CreateCollectionRequest(id = \"vectors\", indexSchema = ischema)\ncreate_collection(client, \"user1\", req)","category":"page"},{"location":"collections/#Example:-Creating-a-Collection-with-Text-Index","page":"Collections","title":"Example: Creating a Collection with Text Index","text":"","category":"section"},{"location":"collections/","page":"Collections","title":"Collections","text":"text_params = IndexTextParameters(analyser = \"standard\")\nischema = Dict(\"description\" => IndexSchemaValue(\n    type = \"text\",\n    text = text_params\n))\n\nreq = CreateCollectionRequest(id = \"text_data\", indexSchema = ischema)\ncreate_collection(client, \"user1\", req)","category":"page"},{"location":"collections/#Example:-Listing-Collections","page":"Collections","title":"Example: Listing Collections","text":"","category":"section"},{"location":"collections/","page":"Collections","title":"Collections","text":"collections = list_collections(client, \"user1\")\nfor col in collections.collections\n    println(\"Collection: $(col.id)\")\nend","category":"page"},{"location":"collections/#Example:-Getting-Collection-Details","page":"Collections","title":"Example: Getting Collection Details","text":"","category":"section"},{"location":"collections/","page":"Collections","title":"Collections","text":"collection = get_collection(client, \"user1\", \"vectors\")\nprintln(\"Collection ID: $(collection.id)\")\nprintln(\"Shard count: $(length(collection.shards))\")","category":"page"},{"location":"collections/#Collection-Schema","page":"Collections","title":"Collection Schema","text":"","category":"section"},{"location":"collections/","page":"Collections","title":"Collections","text":"Each collection has a schema that defines how data is indexed. The schema is a dictionary mapping field names to index types.","category":"page"},{"location":"collections/#Supported-Index-Types","page":"Collections","title":"Supported Index Types","text":"","category":"section"},{"location":"collections/","page":"Collections","title":"Collections","text":"vectorVamana: Graph-based approximate nearest neighbor search\nvectorFlat: Exact search (brute force)\ntext: Text search with semantic capabilities\nstring: String field indexing\nstringArray: Array of strings indexing\ninteger: Integer field indexing\nfloat: Floating-point field indexing","category":"page"},{"location":"collections/#Example-Schema","page":"Collections","title":"Example Schema","text":"","category":"section"},{"location":"collections/","page":"Collections","title":"Collections","text":"schema = Dict(\n    \"embedding\" => IndexSchemaValue(\n        type = \"vectorVamana\",\n        vectorVamana = IndexVectorVamanaParameters(\n            vectorSize = 128,\n            distanceMetric = \"cosine\"\n        )\n    ),\n    \"description\" => IndexSchemaValue(\n        type = \"text\",\n        text = IndexTextParameters(analyser = \"standard\")\n    ),\n    \"category\" => IndexSchemaValue(\n        type = \"string\",\n        string = IndexStringParameters(caseSensitive = false)\n    )\n)","category":"page"},{"location":"collections/#Error-Handling","page":"Collections","title":"Error Handling","text":"","category":"section"},{"location":"collections/","page":"Collections","title":"Collections","text":"When working with collections, you may encounter errors. The API returns appropriate error responses that you can handle:","category":"page"},{"location":"collections/","page":"Collections","title":"Collections","text":"try\n    create_collection(client, \"user1\", CreateCollectionRequest(id = \"invalid name\", indexSchema = Dict()))\ncatch e\n    println(\"Error creating collection: $(e)\")\nend","category":"page"},{"location":"collections/","page":"Collections","title":"Collections","text":"Common errors include:","category":"page"},{"location":"collections/","page":"Collections","title":"Collections","text":"Invalid collection name format\nSchema validation errors\nCollection already exists\nPermission denied","category":"page"},{"location":"#SemaDbAPI.jl","page":"Home","title":"SemaDbAPI.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SemaDbAPI.jl is a Julia client library for interacting with SemaDB, a high-performance vector database designed for similarity search and semantic operations.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SemaDbAPI.jl provides a complete, strongly-typed interface to manage collections, insert points, and perform various search operations with different indexing strategies. The package was generated using OpenAPI.jl, ensuring type safety and comprehensive API coverage.","category":"page"},{"location":"#Key-Features","page":"Home","title":"Key Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Multiple Indexing Strategies:\nVamana (graph-based approximate nearest neighbor search)\nFlat (exact search)\nText indexing for semantic search\nBinary and Product quantization options\nRich Query Capabilities:\nVector similarity search\nMetadata filtering\nComplex query composition with AND/OR operators\nSorting and pagination\nStrongly-Typed Interface:\nGenerated models for all API requests and responses\nCompile-time validation of parameters\nComprehensive error handling","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"SemaDbAPI\")","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using SemaDbAPI\nusing UUIDs\n\n# Initialize client\nclient = SemaDBClient(\"http://localhost:8081/v2\")\n\n# Create a collection with Vamana indexing\nivvp = IndexVectorVamanaParameters(\n    vectorSize = 2,\n    distanceMetric = \"euclidean\",\n    searchSize = 75,\n    degreeBound = 64,\n    alpha = 1.2\n)\nischema = Dict(\"vector\" => IndexSchemaValue(\n    type = \"vectorVamana\",\n    vectorVamana = ivvp\n))\nreq = CreateCollectionRequest(id = \"mycollection\", indexSchema = ischema)\ncreate_collection(client, \"Julia\", req)\n\n# Insert points\npoints = [\n    Dict(\"_id\" => string(uuid4()), \"vector\" => [1.0, 2.0], \"metadata\" => \"first point\"),\n    Dict(\"_id\" => string(uuid4()), \"vector\" => [3.0, 4.0], \"metadata\" => \"second point\")\n]\ninsert_req = InsertPointsRequest(points = points)\ninsert_point(client, \"Julia\", \"mycollection\", insert_req)\n\n# Perform search\nsearch_opts = SearchVectorVamanaOptions(vector = [1, 2], operator = \"near\")\nquery = Query(property = \"vector\", vectorVamana = search_opts)\nsearch_req = SearchRequest(query = query, limit = 10)\nsearch_res = search_point(client, \"Julia\", \"mycollection\", search_req)\n\n# Clean up\ndelete_collection(client, \"Julia\", \"mycollection\")","category":"page"},{"location":"#Documentation-Structure","page":"Home","title":"Documentation Structure","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"getting_started.md\",\n    \"collections.md\",\n    \"points.md\",\n    \"search.md\",\n    \"models.md\",\n    \"api_reference.md\",\n]\nDepth = 2","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is licensed under the MIT License.","category":"page"},{"location":"points/#Points-API","page":"Points","title":"Points API","text":"","category":"section"},{"location":"points/","page":"Points","title":"Points","text":"Points represent individual data items stored in a collection. Each point contains fields that match the collection's schema.","category":"page"},{"location":"points/#Inserting-Points","page":"Points","title":"Inserting Points","text":"","category":"section"},{"location":"points/#Example:-Inserting-Multiple-Points","page":"Points","title":"Example: Inserting Multiple Points","text":"","category":"section"},{"location":"points/","page":"Points","title":"Points","text":"using UUIDs\n\npoints = [\n    Dict(\n        \"_id\" => string(uuid4()),\n        \"vector\" => [0.1, 0.2, 0.3],\n        \"metadata\" => Dict(\"category\" => \"A\", \"value\" => 10)\n    ),\n    Dict(\n        \"_id\" => string(uuid4()),\n        \"vector\" => [0.4, 0.5, 0.6],\n        \"metadata\" => Dict(\"category\" => \"B\", \"value\" => 20)\n    )\n]\n\ninsert_req = InsertPointsRequest(points = points)\ninsert_point(client, \"user1\", \"vectors\", insert_req)","category":"page"},{"location":"points/#Example:-Inserting-Points-with-Text-Data","page":"Points","title":"Example: Inserting Points with Text Data","text":"","category":"section"},{"location":"points/","page":"Points","title":"Points","text":"points = [\n    Dict(\n        \"_id\" => string(uuid4()),\n        \"text\" => \"Julia is a high-level, high-performance programming language\"\n    ),\n    Dict(\n        \"_id\" => string(uuid4()),\n        \"text\" => \"Vector databases enable efficient similarity search\"\n    )\n]\n\ninsert_req = InsertPointsRequest(points = points)\ninsert_point(client, \"user1\", \"text_data\", insert_req)","category":"page"},{"location":"points/#Updating-Points","page":"Points","title":"Updating Points","text":"","category":"section"},{"location":"points/#Example:-Updating-Points","page":"Points","title":"Example: Updating Points","text":"","category":"section"},{"location":"points/","page":"Points","title":"Points","text":"# Update metadata for a specific point\nupdate_req = UpdatePointsRequest(\n    points = [\n        Dict(\n            \"_id\" => \"f269a46b-ccf7-5d73-abea-4c690281aa53\",\n            \"metadata\" => Dict(\"category\" => \"Updated\", \"value\" => 100)\n        )\n    ]\n)\nupdate_point(client, \"user1\", \"vectors\", update_req)","category":"page"},{"location":"points/#Example:-Deleting-Points-by-ID","page":"Points","title":"Example: Deleting Points by ID","text":"","category":"section"},{"location":"points/","page":"Points","title":"Points","text":"delete_req = DeletePointsRequest(ids = [\"f269a46b-ccf7-5d73-abea-4c690281aa53\", \"point-456\"])\ndelete_point(client, \"user1\", \"vectors\", delete_req)","category":"page"},{"location":"points/#Example:-Deleting-Points-with-Filter","page":"Points","title":"Example: Deleting Points with Filter","text":"","category":"section"},{"location":"points/","page":"Points","title":"Points","text":"# Create a query to match points with category \"B\"\nquery = Query(\n    property = \"metadata.category\",\n    string = SearchStringOptions(operator = \"equals\", value = \"B\")\n)\n\ndelete_req = DeletePointsRequest(query = query)\ndelete_point(client, \"user1\", \"vectors\", delete_req)","category":"page"},{"location":"points/#Point-Structure","page":"Points","title":"Point Structure","text":"","category":"section"},{"location":"points/","page":"Points","title":"Points","text":"Points in SemaDB follow a specific structure:","category":"page"},{"location":"points/","page":"Points","title":"Points","text":"_id (optional): Unique identifier for the point (if not provided, one will be generated)\nOther fields: Must match the collection's schema","category":"page"},{"location":"points/#Example-Point","page":"Points","title":"Example Point","text":"","category":"section"},{"location":"points/","page":"Points","title":"Points","text":"{\n  \"_id\": \"f269a46b-ccf7-5d73-abea-4c690281aa53\",\n  \"vector\": [0.1, 0.2, 0.3],\n  \"metadata\": {\n    \"category\": \"A\",\n    \"value\": 10\n  }\n}","category":"page"},{"location":"points/#Error-Handling","page":"Points","title":"Error Handling","text":"","category":"section"},{"location":"points/","page":"Points","title":"Points","text":"When working with points, you may encounter errors such as:","category":"page"},{"location":"points/","page":"Points","title":"Points","text":"Invalid point format\nSchema validation errors\nPoint not found\nPermission denied","category":"page"},{"location":"points/","page":"Points","title":"Points","text":"The API returns detailed error information to help diagnose issues:","category":"page"},{"location":"points/","page":"Points","title":"Points","text":"try\n    insert_point(client, \"user1\", \"vectors\", InsertPointsRequest(points = [Dict()]))\ncatch e\n    println(\"Error inserting points: $(e)\")\nend","category":"page"},{"location":"points/","page":"Points","title":"Points","text":"The InsertPointsResponse also includes information about failed points:","category":"page"},{"location":"points/","page":"Points","title":"Points","text":"insert_req = InsertPointsRequest(points = [\n    Dict(\"_id\" => \"f269a46b-ccf7-5d73-abea-4c690281aa53\", \"vector\" => [1.0, 2.0]),\n    Dict(\"_id\" => \"invalid\", \"vector\" => \"not a vector\")\n])\nresponse = insert_point(client, \"user1\", \"vectors\", insert_req)\n\nif !isempty(response.failedPoints)\n    println(\"Some points failed to insert:\")\n    for failed in response.failedPoints\n        println(\"- $(failed.id): $(failed.error)\")\n    end\nend","category":"page"},{"location":"points/#Best-Practices","page":"Points","title":"Best Practices","text":"","category":"section"},{"location":"points/","page":"Points","title":"Points","text":"Always provide _id values for points you want to update or delete later\nBatch insert operations for better performance (up to 1000 points per request)\nUse appropriate indexing strategies based on your query patterns\nConsider the vector dimension size when designing your schema","category":"page"}]
}
